package com.hoya.randomtodaylaunch.ui

import android.content.Intent
import android.graphics.Color
import android.graphics.Typeface
import android.net.Uri
import android.os.Bundle
import android.view.Gravity
import android.view.Menu
import android.view.MenuItem
import android.view.View
import android.view.animation.Animation
import android.view.animation.AnimationUtils
import android.widget.FrameLayout
import android.widget.TextView
import androidx.activity.viewModels
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.ViewModelProvider
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.sqlite.db.SimpleSQLiteQuery
import com.hoya.randomtodaylaunch.R
import com.hoya.randomtodaylaunch.adapter.MenuAdapter
import com.hoya.randomtodaylaunch.databinding.ActivityResultBinding
import com.hoya.randomtodaylaunch.data.entity.FoodEntity
import com.hoya.randomtodaylaunch.util.RecyclerViewDecoration
import com.hoya.randomtodaylaunch.viewModel.ListViewModel
import com.google.android.material.snackbar.BaseTransientBottomBar.ANIMATION_MODE_SLIDE
import com.google.android.material.snackbar.Snackbar
import java.util.*


/* ÎûúÎç§ Í≤∞Í≥º Ï∂úÎ†• Ïï°Ìã∞ÎπÑÌã∞ */
class ResultActivity : AppCompatActivity() {

    private lateinit var binding: ActivityResultBinding
    private lateinit var viewModel: ListViewModel
    private val adapter: MenuAdapter by lazy {
        MenuAdapter()
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityResultBinding.inflate(layoutInflater)
        setContentView(binding.root)

        val viewModelFactory = ListViewModel.ListViewModelFactory()
        viewModel = ViewModelProvider(this, viewModelFactory).get(ListViewModel::class.java)

        setSupportActionBar(binding.toolbar)
        supportActionBar!!.setHomeAsUpIndicator(R.drawable.ic_back)

        val getCheckList = intent.getStringArrayListExtra("checkList")!! // Î©îÏù∏ÏóêÏÑú ÏÑ†ÌÉùÌïú ÏùåÏãù Ï¢ÖÎ•ò
        lateinit var randomList: ArrayList<FoodEntity>
        var randomInt: Int
        lateinit var result: FoodEntity


        // Ïï†ÎãàÎ©îÏù¥ÏÖò ÏÑ§Ï†ï
        val animation = AnimationUtils.loadAnimation(applicationContext, R.anim.shake)
        binding.ivRotate.startAnimation(animation)

        animation.setAnimationListener(object : Animation.AnimationListener {
            override fun onAnimationStart(p0: Animation?) {
                uiVisibleControl(View.INVISIBLE)
            }

            override fun onAnimationEnd(p0: Animation?) {
                uiVisibleControl(View.VISIBLE)
            }

            override fun onAnimationRepeat(p0: Animation?) {}
        })

        // Ï¢ÖÎ•òÏóê Îî∞Îùº Î©îÎâ¥Î•º Í∞±Ïã†ÌïòÍ∏∞ ÏúÑÌïú ÏøºÎ¶¨Î¨∏
        val query =
            SimpleSQLiteQuery("SELECT * FROM food WHERE type IN ('${getCheckList.joinToString("','")}')")


        // Ï¢ÖÎ•ò Í∞±Ïã† ÌõÑ ÌñâÎèô
        viewModel.getFoodList(query).observe(this) { it ->
            randomList = it as ArrayList<FoodEntity> // ÎûúÎç§ Î¶¨Ïä§Ìä∏ Ï¥àÍ∏∞Ìôî

            randomInt = Random().nextInt(it.size - 1) // ÎûúÎç§ Ïà´Ïûê Ï∂úÎ†•
            result = it[randomInt]

            binding.food = result // DataBinding
            result.name?.let {
                // Î©îÎâ¥ Î¶¨Ïä§Ìä∏ ÏòµÏ†ÄÎπô ÌõÑ Ï°∞Ïπò
                viewModel.getMenuList(result.name!!).observe(this) { list ->
                    adapter.submitList(list)

                    if (list.isEmpty()) { // Î©îÎâ¥ Î¶¨Ïä§Ìä∏Í∞Ä ÏóÜÏúºÎ©¥ ÏïàÎÇ¥
                        binding.itemEmpty.text = "Î©îÎâ¥Í∞Ä Îì±Î°ùÎêòÏñ¥ ÏûàÏßÄ ÏïäÏïÑÏöî üò≠"
                    } else {
                        binding.itemEmpty.text = ""
                    }
                }
            } // Ï¢ÖÎ•òÏóê Îî∞Î•∏ Î©îÎâ¥Î¶¨Ïä§Ìä∏ Í∞±Ïã†
        }


        binding.rcvMenu.addItemDecoration(RecyclerViewDecoration(10))
        binding.rcvMenu.adapter = adapter
        binding.rcvMenu.layoutManager = LinearLayoutManager(this)


        // ÏûêÏÑ∏Ìïú Ï†ïÎ≥¥ ÌôïÏù∏ÌïòÍ∏∞
        binding.btnInfo.setOnClickListener {
            val uri = "Í≥†Ï≤ô ${result.name}"

            val intent =
                Intent(
                    Intent.ACTION_VIEW,
                    Uri.parse("https://m.map.naver.com/search2/search.naver?query=${uri}&sm=hty&style=v5#/list")
                )
            startActivity(intent)
        }

        // ÎπºÍ≥† Îã§ÏãúÎèåÎ¶¨Í∏∞
        binding.btnRedecide.setOnClickListener { list ->

            randomList.remove(result)

            if (randomList.size == 0) { // Îçî Ïù¥ÏÉÅ Ï¢ÖÎ•òÍ∞Ä ÏóÜÏùÑ Í≤ΩÏö∞

                val snackBar = Snackbar.make(list, "Îçî Ïù¥ÏÉÅ Ï¢ÖÎ•òÍ∞Ä ÏóÜÏñ¥Ïöî!", Snackbar.LENGTH_SHORT)
                setSnackBarOption(snackBar)
                snackBar.show()

                return@setOnClickListener
            } else { // Ïï†ÎãàÎ©îÏù¥ÏÖòÍ≥º Ìï®Íªò Îã§Ïãú Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù

                binding.ivRotate.startAnimation(animation)

                randomInt = Random().nextInt(randomList.size)
                result = randomList[randomInt]
                binding.food = result // Data Binding
                result.name.let { viewModel.getMenuList(it!!) }
            }
        }
    }

    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        menuInflater.inflate(R.menu.menu_result, menu)
        return true
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            android.R.id.home -> {
                finish()
                return true
            }
            R.id.action_mail -> {
                val intent = Intent(Intent.ACTION_SEND)
                intent.type = "plain/text"
                val address = arrayOf("ropem_@naver.com")
                intent.putExtra(Intent.EXTRA_EMAIL, address)
                startActivity(intent)
                return true
            }

            else -> super.onOptionsItemSelected(item)
        }
    }

    // UI ÏùºÏãú ÏàòÏ†ï
    private fun uiVisibleControl(visibility: Int) {
        binding.itemEmpty.visibility = visibility
        binding.rcvMenu.visibility = visibility
        binding.tvTitle.visibility = visibility
        binding.layoutText.visibility = visibility
        binding.btnInfo.visibility = visibility
        binding.btnRedecide.visibility = visibility
    }

    // Ïä§ÎÇµÎ∞î ÏòµÏÖò ÏÑ§Ï†ï
    private fun setSnackBarOption(snackBar: Snackbar) {
        snackBar.animationMode = ANIMATION_MODE_SLIDE
        val snackBarView = snackBar.view
        val snackBarText =
            snackBarView.findViewById<TextView>(com.google.android.material.R.id.snackbar_text)
        val snackBarLayout: FrameLayout.LayoutParams =
            snackBarView.layoutParams as FrameLayout.LayoutParams
        snackBarLayout.gravity = Gravity.CENTER_HORIZONTAL or Gravity.BOTTOM
        snackBarLayout.bottomMargin = 10
        snackBarLayout.width = 650
        snackBarLayout.height = 120
        snackBarText.textAlignment = View.TEXT_ALIGNMENT_CENTER
        snackBarText.typeface = Typeface.createFromAsset(this.assets, "context.ttf")
        snackBarView.setBackgroundColor(Color.parseColor("#4354F1"))
    }
}